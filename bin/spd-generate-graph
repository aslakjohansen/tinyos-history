#!/usr/bin/env python
# -*- coding: utf8 -*-

import cairo

def in2point (i): return float(i)*72.0
def mm2in (mm): return float(mm)/25.4
def mm2point (mm): return in2point(mm2in(mm))

textsize = 10.0
border = mm2point(5)
agression = 0.8

def write_file (filename, lines):
  fo = open(filename, 'w')
  fo.writelines(lines)
  fo.close()
  
def read_file (filename):
  fo = open(filename, 'r')
  lines = fo.readlines()
  fo.close()
  return lines

def lut_generate (header):
  lut = {}
  elements = filter(lambda e: e!="", header[1:].strip().split(","))
  for i in range(len(elements)):
    lut[elements[i]] = i+1
  return lut

def lut_lookup (lut, name):
  return lut[name]

def read_csv (filename):
  lines = read_file(filename)
  lut = lut_generate(lines[0])
  return lines[1:], lut

def lookup_score (subsystem, platform):
  for line in lines:
    elements = line.strip().split(",")
#    print elements
#    print subsystem
    if elements[lut_lookup(lut, "subsystem")] == subsystem:
      return int(elements[lut_lookup(lut, platform)])
  return -1

# load input
lines, lut = read_csv("spd_map.csv")
lines = filter(lambda e: e.strip().split(",")[lut_lookup(lut, "dependencyfree")] == "0", lines)

# dummy to get access to a context
surface = cairo.PDFSurface("spd_graph.pdf", 0, 0)
ct = cairo.Context(surface)
ct.select_font_face("LMRoman10", cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
ct.set_font_size(textsize)

# subsystem data
subsystem_names = map(lambda e: e.strip().split(",")[lut_lookup(lut, "subsystem")], lines)
subsystem_names.sort()
subsystems = {}
for subsystem_name in subsystem_names:
  x_bearing, y_bearing, textwidth, textheight = ct.text_extents(subsystem_name)[:4]
  subsystems[subsystem_name] = textwidth+x_bearing
subsystem_width = map(lambda e: subsystems[e], subsystem_names)

# platform data
platform_names = filter(lambda e: e!="dependencyfree" and e!="subsystem", lut.keys())
platform_names.sort()
platforms = {}
for platform_name in platform_names:
  x_bearing, y_bearing, textwidth, textheight = ct.text_extents(platform_name)[:4]
  platforms[platform_name] = textwidth+x_bearing
platform_width = map(lambda e: platforms[e], platform_names)

# calculate size of figure
figurewidth = border*(2+len(subsystem_names)) + sum(subsystem_width) + max(platform_width)
figureheight = border*3+textsize*(1+len(platform_names))

# init cairo
surface = cairo.PDFSurface("spd_graph.pdf", figurewidth, figureheight)
ct = cairo.Context(surface)
ct.select_font_face("LMRoman10", cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
ct.set_font_size(textsize)

# render platform labels
i = 0
platform_centers = {}
for platform in platform_names:
  ct.move_to(border+max(platform_width)-platforms[platform], 2*border+(1+1+i)*textsize)
  ct.show_text(platform)
  platform_centers[platform] = (2*border+max(platform_width), 2*border+(1+1+i)*textsize-textsize/2)
  i += 1

# render subsystem labels
offset = 0
subsystem_centers = {}
for subsystem in subsystem_names:
  ct.move_to(2*border+max(platform_width)+offset, border+textsize)
  ct.show_text(subsystem)
  subsystem_centers[subsystem] = (2*border+max(platform_width)+offset+subsystems[subsystem]/2, 2*border+textsize)
  offset += subsystems[subsystem]+border

# render curves
maxscore = 0
for subsystem in subsystems:
  for platform in platforms:
    score = lookup_score(subsystem, platform)
    if score > maxscore: maxscore = score
print "maxscore = "+str(maxscore)
ct.set_line_cap(cairo.LINE_CAP_ROUND)
for subsystem in subsystems:
  for platform in platforms:
    score = lookup_score(subsystem, platform)
    if score == 0: continue
    tone = float(score)/maxscore
    
    ct.save()
    ct.set_source_rgba(tone, 0, 1.0-tone, 0.5)
    ct.move_to(platform_centers[platform][0], platform_centers[platform][1])
    ct.curve_to(platform_centers[platform][0]+agression*(subsystem_centers[subsystem][0]-platform_centers[platform][0]), platform_centers[platform][1],
                subsystem_centers[subsystem][0], subsystem_centers[subsystem][1]+agression*(platform_centers[platform][1]-subsystem_centers[subsystem][1]),
                subsystem_centers[subsystem][0], subsystem_centers[subsystem][1])
    ct.stroke()
    ct.restore()

# generate latex table
texlines = []
texlines.append("% automatically generated by script (spd-generate-graph)\n")
texlines.append("\\begin{figure}\n")
texlines.append("  \centering\n")
texlines.append("  \\begin{tabular}{l"+("r"*len(platforms))+"}\n")
texlines.append("    & "+(" & ".join(map(lambda e: "\\emph{"+e+"}", subsystems)))+" \\\\\n")
for platform in platforms:
  scores = map(lambda e: str(lookup_score(e, platform)), subsystems)
  texlines.append("    \\emph{"+platform+"} & "+(" & ".join(scores))+"\\\\\n")
texlines.append("  \\end{tabular}\n")
texlines.append("  \\caption{Counts for uses of platform defines in subsystems.}\n")
texlines.append("  \\label{fig:spd:bipartite}\n")
texlines.append("\\end{figure}\n")
write_file("spd_graph.tex", texlines)







